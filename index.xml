<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JR&#39;s tech blog</title>
    <link>http://jrusev.github.io/</link>
    <description>Recent content on JR&#39;s tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Dec 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://jrusev.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hacking MNIST in 30 lines of Python</title>
      <link>http://jrusev.github.io/post/hacking-mnist/</link>
      <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jrusev.github.io/post/hacking-mnist/</guid>
      <description>

&lt;p&gt;In order to better understand neural networks, I wanted to see one implemented
with a minimal amount of code. I quickly found a neural network in
&lt;a href=&#34;http://iamtrask.github.io/2015/07/12/basic-python-network/&#34;&gt;11 lines of Python&lt;/a&gt;.
It&amp;rsquo;s a great little piece of code that learns the XOR function and shows the
backpropagation in action. I felt however, that I needed a slightly more complex
example - a neural net that could recognize handwritten digits from the
&lt;a href=&#34;http://yann.lecun.com/exdb/mnist/&#34;&gt;MNIST dataset&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jrusev.github.io/img/mnist_digits.png&#34; alt=&#34;MNIST Digits&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Michael Nielsen&amp;rsquo;s
&lt;a href=&#34;http://neuralnetworksanddeeplearning.com/&#34;&gt;great book&lt;/a&gt; on neural networks is
built upon just this classification problem, but the simplest implementation is
&lt;a href=&#34;https://github.com/mnielsen/neural-networks-and-deep-learning/blob/master/src/network.py&#34;&gt;74 lines&lt;/a&gt;
of code (without the comments). So I took that code and refactored it down
to 25 lines
(&lt;a href=&#34;https://github.com/jrusev/simple-neural-networks/blob/master/mlp_numpy_relu.py&#34;&gt;source&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import mnist

def feed_forward(X, weights):
    a = [X]
    for w in weights:
        a.append(np.maximum(a[-1].dot(w),0))
    return a

def grads(X, Y, weights):
    grads = np.empty_like(weights)
    a = feed_forward(X, weights)
    delta = a[-1] - Y
    grads[-1] = a[-2].T.dot(delta)
    for i in xrange(len(a)-2, 0, -1):
        delta = (a[i] &amp;gt; 0) * delta.dot(weights[i].T)
        grads[i-1] = a[i-1].T.dot(delta)
    return grads / len(X)

trX, trY, teX, teY = mnist.load_data()
weights = [np.random.randn(*w) * 0.1 for w in [(784, 100), (100, 10)]]
num_epochs, batch_size, learn_rate = 30, 20, 0.1

for i in xrange(num_epochs):
    for j in xrange(0, len(trX), batch_size):
        X, Y = trX[j:j+batch_size], trY[j:j+batch_size]
        weights -= learn_rate * grads(X, Y, weights)
    prediction = np.argmax(feed_forward(teX, weights)[-1], axis=1)
    print i, np.mean(prediction == np.argmax(teY, axis=1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run this code, you will get to about 97.8% accuracy on the test set.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jrusev.github.io/img/nn_training.png&#34; alt=&#34;Neural Network Training&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The algorithm is practically the same as the original implementation. The net
has one hidden layer with 100 neurons and uses mini batch gradient descent
to learn the weights. It has two dependencies - &lt;code&gt;numpy&lt;/code&gt;, which handles vector
and matrix operations, and &lt;code&gt;mnist&lt;/code&gt; which is a simple
&lt;a href=&#34;https://github.com/jrusev/simple-neural-networks/blob/master/mnist.py&#34;&gt;script&lt;/a&gt;
that downloads the MNIST data and loads it to memory.&lt;/p&gt;

&lt;p&gt;The major difference is that instead of loops I use matrix operations, which
means you can process the entire mini batch as a matrix instead of iterating
over each training example. As a result, the training is about 5 times faster
than the original code, while you can still see what&amp;rsquo;s going on under the hood.
I changed the activation function from sigmoid to ReLU, which is just
&lt;code&gt;f(x) = max(0, x)&lt;/code&gt; and its derivative is as simple as &lt;code&gt;x &amp;gt; 0&lt;/code&gt; (applied
element-wise). I&amp;rsquo;ve also dropped the bias terms because in this problem they do
not considerably improve accuracy.&lt;/p&gt;

&lt;h3 id=&#34;implementation-with-a-high-level-ml-library:2f5fc919e238dac1556de59dd7783f3d&#34;&gt;Implementation with a high-level ML library&lt;/h3&gt;

&lt;p&gt;Once we understand how backpropagation works, we can hide the complexity by
using a machine learning library. So I implemented the exact same network as
above using Theano, TensorFlow, Keras and Torch - see
&lt;a href=&#34;https://github.com/jrusev/simple-neural-networks&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Computer Science as an Abstract Form of Engineering</title>
      <link>http://jrusev.github.io/post/abstract-engineering/</link>
      <pubDate>Fri, 05 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jrusev.github.io/post/abstract-engineering/</guid>
      <description>&lt;p&gt;I recently came upon a lecture on &lt;a href=&#34;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/&#34;&gt;The Structure and Interpretation of Computer Programs&lt;/a&gt; by Hal Abelson and Jay Sussman from 1986, which compared computer science to other forms of engineering. I always thought software engineering had some fundamental property that made it more powerful than let&amp;rsquo;s say electrical or chemical engineering, but I couldn&amp;rsquo;t quite express what that property was.&lt;/p&gt;

&lt;p&gt;The answer is that &lt;em&gt;computer science is like an abstract form of engineering&lt;/em&gt;, as Abelson puts it - &lt;strong&gt;the constraints imposed in building large software systems are the limitations of our own minds.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is an abstract of that first lecture:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Computer science, in some sense, isn&amp;rsquo;t real. You see, when an engineer is designing a physical system, that&amp;rsquo;s made out of real parts. The engineers who worry about that have to address problems of tolerance and approximation and noise in the system.&lt;/p&gt;

&lt;p&gt;Computer science deals with idealized components. We know as much as we want about
these little program and data pieces that we&amp;rsquo;re fitting things together. We don&amp;rsquo;t have to
worry about tolerance. And that means that, &lt;strong&gt;in building a large program, there&amp;rsquo;s not all that much difference between what I can build and what I can imagine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So as opposed to other kinds of engineering, where the constraints on what you can build are the constraints of physical systems, the constraints of physics and noise and approximation, the constraints imposed in building large software systems are the limitations of our own minds.&lt;/p&gt;

&lt;p&gt;So in that sense, computer science is like an abstract form of engineering. It&amp;rsquo;s the kind of engineering where you ignore the constraints that are imposed by reality.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>4Clojure Solutions</title>
      <link>http://jrusev.github.io/post/4clojure-solutions/</link>
      <pubDate>Sun, 31 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jrusev.github.io/post/4clojure-solutions/</guid>
      <description>&lt;p&gt;For some time I wanted to dab into functional programming and see how different
it is from the procedural approach. Since three of my colleagues at
&lt;a href=&#34;https://tradeo.com/&#34;&gt;Tradeo.com&lt;/a&gt; are Clojure masters (one of them wrote the
&lt;a href=&#34;https://github.com/bbatsov/clojure-style-guide&#34;&gt;Clojure Style Guide&lt;/a&gt;,
&lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;CIDER&lt;/a&gt; and
&lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;Projectile&lt;/a&gt;, and the other teaches
Clojure to CS students), it looked like the obvious choice. Although there are
other functional languages worth exploring, I realized that there is something
special about Clojure, that made me commit to studying it in depth.&lt;/p&gt;

&lt;p&gt;Because you learn a new programming language through your fingers, I decided to
solve as many problems as I can from &lt;a href=&#34;http://www.4clojure.com/&#34;&gt;4Clojure&lt;/a&gt;.
So &lt;a href=&#34;https://github.com/jrusev/fourclojure-solutions&#34;&gt;here&lt;/a&gt; is my repo with the
solutions. What&amp;rsquo;s great about the site is that after you solve a problem, you
can see how other people have solved it. I have subscribed to some of the top
users, and it is a great way to learn how to write idiomatic Clojure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Physics of Software</title>
      <link>http://jrusev.github.io/post/physics-of-software/</link>
      <pubDate>Thu, 02 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jrusev.github.io/post/physics-of-software/</guid>
      <description>&lt;p&gt;This is something I read recently, that I think sums up rather nicely what
programming is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“The physics of software is not algorithms, data structures, languages and
abstractions. These are just tools we make, use, throw away. The real physics of
software is the physics of people — specifically, our limitations when it comes
to complexity, and our desire to work together to solve large problems in pieces.
This is the science of programming: make building blocks that people can
understand and use easily, and people will work together to solve the very
largest problems.”&lt;/p&gt;

&lt;p&gt;~ Peter Hintjens et al., &lt;a href=&#34;http://zguide.zeromq.org/&#34;&gt;ØMQ - The Guide&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Thanks Telerik Academy</title>
      <link>http://jrusev.github.io/post/thanks-telerik/</link>
      <pubDate>Sat, 07 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jrusev.github.io/post/thanks-telerik/</guid>
      <description>&lt;p&gt;So I have finally finished the &lt;a href=&#34;http://academy.telerik.com/&#34;&gt;Telerik Software Academy&lt;/a&gt; and it was a transforming experience. Before I
started the Academy I asked some friends of mine who were developers, if it is
possible to become a junior level developer in 1 year starting from zero. I
didn&amp;rsquo;t exactly start from zero, I learned BASIC and Assembler when I was a kid,
and later enough C++ to write a Bulls &amp;amp; Cows game, but I knew nothing about
modern web or game development. No idea what JavaScript, CSS or OOP was. And so
were most of the other students.&lt;/p&gt;

&lt;p&gt;Now I know for certain that it is possible to become a junior developer in about
12 months. The numbers prove it - every one I know from the Academy found a job
within a couple of months after graduation. But statistics are not all. What
they don&amp;rsquo;t show is the enormous amount of work and stress and dedication
required to complete all the exams at the Academy with excellence. I have
probably put about 16 hours a day for 12 straight months to study and write code.
Here is the punch card of my Telerik Academy &lt;a href=&#34;https://github.com/jrusev/TelerikAcademy&#34;&gt;repo&lt;/a&gt; where I put all my homework
assignments and team projects:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jrusev.github.io/img/punch-card.png&#34; alt=&#34;Punch Card&#34; /&gt;
&lt;!-- 
&lt;figure &gt;
    
        &lt;img src=&#34;http://jrusev.github.io/img/punch-card.png&#34; /&gt;
    
    
&lt;/figure&gt;
 --&gt;&lt;/p&gt;

&lt;p&gt;And check this guy&amp;rsquo;s &lt;a href=&#34;https://github.com/jasssonpet/TelerikAcademy/graphs/punch-card&#34;&gt;repo&lt;/a&gt;, who I think is
one of the best students ever completed the Academy and who writes the most
elegant code I&amp;rsquo;ve ever seen (he is now working on the &lt;a href=&#34;https://www.nativescript.org/&#34;&gt;NativeScript&lt;/a&gt; runtime). It looks like he didn&amp;rsquo;t sleep :)&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve estimated that we have put a total of over 100 hours just in sitting for
exams (16 exams of 6-8 hours each). And the competition was really intense -
about 1500 students enrolled in the class of &lt;sup&gt;2013&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2014&lt;/sub&gt; and 150 graduated with a &lt;a href=&#34;http://telerikacademy.com/Certificates/View/930/bee16b8e&#34;&gt;certificate&lt;/a&gt; (that
means they took all exams with excellence). We were using an automated scoring
system (&lt;a href=&#34;http://bgcoder.com/&#34;&gt;BGCoder&lt;/a&gt;) which showed live results during the
exams (similar to &lt;a href=&#34;http://www.topcoder.com/&#34;&gt;TopCoder&lt;/a&gt;) and there were always
some people who solved the problems super fast and even left early. So our
teachers made the problems so hard, that only 1 or 2 people could solve all
problems and sometimes no one had the maximum possible result. So when you got
in the top 10, you were pretty darn happy about it :) I knew that the toughest
exam was Data Structures and Algorithms, and if I wanted to become a software
engineer I had to ace that exam. So I studied really hard and I solved all
problems at the exam and got to the 3rd place. That was pretty awesome :)&lt;/p&gt;

&lt;p&gt;I think what makes the Academy so successful is the way the program is
structured. Instead of going straight to studying a technology (like databases,
a web framework, or mobile applications), you first build a good foundation
covering algorithms, data structures, object oriented programming and high
quality code principles. You go from building basic console applications,
through simple static html pages, more dynamic javascript applications and
finally full scale database driven business applications. You go from the more
simple and concrete to the more complex and abstract, with practically no gaps.
We also have some super smart trainers (national coding competition winners) who
really care about their students.&lt;/p&gt;

&lt;p&gt;So thank you Telerik Academy for the excellent training and the challenges along
the way! Now its my turn to use technology to solve some real world problems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>http://jrusev.github.io/about/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jrusev.github.io/about/</guid>
      <description>&lt;p&gt;My name is &lt;strong&gt;Jivko Rusev&lt;/strong&gt; (&lt;em&gt;JR&lt;/em&gt; for short) and I am a &lt;em&gt;software engineer&lt;/em&gt;. I am
passionate about cutting-edge technologies and I like finding simple and
elegant solutions to complex problems. I started this blog as a place to
share my journey through the world of software.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Telerik Academy Demos</title>
      <link>http://jrusev.github.io/post/telerik-demos/</link>
      <pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://jrusev.github.io/post/telerik-demos/</guid>
      <description>&lt;p&gt;Here are some of the applications I worked on while studying at the
&lt;a href=&#34;http://academy.telerik.com/&#34;&gt;Telerik Software Academy&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jrusev.github.io/demos/LetterpressJS&#34;&gt;LetterpressJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jrusev.github.io/demos/Tic-Tac-Toe&#34;&gt;Tic-Tac-Toe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://itemex.herokuapp.com/&#34;&gt;itemex.herokuapp.com&lt;/a&gt; / &lt;a href=&#34;http://adlist.apphb.com/&#34;&gt;adList.apphb.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jrusev/SimplyChat-iOS&#34;&gt;SimplyChat for iOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LetterpressJS is a javascript implementation of the word game Letterpress by
&lt;a href=&#34;http://www.atebits.com/letterpress/&#34;&gt;atebits&lt;/a&gt;. The web app brings the fluid
experience of the iOS game to the browser. Pick letters to form a word and drag
the tiles around to see how they interact with other tiles.&lt;/p&gt;

&lt;p&gt;Tic-Tac-Toe is single-page web application that allows you to play online against
other players. The client is powered by AngularJS, and uses a REST service with
ASP.NET Web API hosted on AppHarbor.&lt;/p&gt;

&lt;p&gt;ItemEx is an online marketplace for used items. It allows users to create a
profile, post ads, view other people&amp;rsquo;s ads, send messages and receive push
notifications. Admins can manage users and ads. The application is built on the
MEAN stack - MongoDB, Express, AngularJS and Node.js. I also developed the same
application using ASP.NET MVC and SQL Server
(&lt;a href=&#34;http://adlist.apphb.com/&#34;&gt;adList.apphb.com&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;SimplyChat is a real-time chat application for iOS. It&amp;rsquo;s a native app written in
Objective-C. I wrote the backend as a REST service running on Node.js and
MongoDB. For the moment the app has only the basic functionality, but I will
develop it into a more polished app with features such as group chat, photo
messages, etc.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>